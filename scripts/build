#!/bin/bash

# Builds a local, native build by default
# Can build a container build if passed appropriate args

set -eux -o pipefail

cmd_build () {
  if [[ $OSTYPE == 'linux-gnu' ]]
  then
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o bin/operator main.go
  else
    make build
  fi
}

cmd_debug () {
    go build -o bin/operator \
        --mod=vendor \
        -tags "debug" \
        -gcflags 'all=-N -l' github.com/greymatter-io/operator
}

cmd_help () {
  echo 'valid args: container, debug_container, build, debug, manifests, help'
}


build_container () {
  local tag=$1
  local dockerfile=$2
  local extra_args=${3:-""}
  # nexus creds are for the cli (not on quay)
  local build_args=" --build-arg username=$NEXUS_USER \
  --build-arg password=$NEXUS_PASS $extra_args"

  local BUILD_CMD='docker build'
  if type -p buildah  &>/dev/null; then
    BUILD_CMD='buildah bud'
  fi

  $BUILD_CMD $build_args --platform linux/amd64 \
  -t "$tag" -f "$dockerfile" .
}

cmd_container () {
  build_container "quay.io/greymatterio/operator:latest" "Dockerfile"
}

cmd_debug_container () {
  build_container "quay.io/greymatterio/operator:debug-latest" "Dockerfile.debug"
}

cmd_manifests () {
  local version="v1.0"
  local location="manifests/${version}"

  echo "Deleting old manifests for version ${version}..."
  \rm -rf manifests/ || echo "No old manifests to delete."
  mkdir -p "$location"
  echo "Generating new manifests into ${location}"
  (
  cd pkg/cuemodule/core
  # Defaults (spire off and auto-applies a mesh)
  cue eval -c ./k8s/outputs \
           --out text \
           -e operator_manifests_yaml > ../../../${location}/defaults.yaml
  # Spire on, and auto-apply a mesh
  cue eval -c ./k8s/outputs \
           --out text \
           -t spire=true \
           -e operator_manifests_yaml > ../../../${location}/withspire.yaml
  # Spire off, and don't auto-apply a mesh (wait for a CR)
  cue eval -c ./k8s/outputs \
           --out text \
           -t auto_apply_mesh=false \
           -e operator_manifests_yaml > ../../../${location}/noautoapply.yaml
  # Spire on, and don't auto-apply a mesh (wait for a CR)
  cue eval -c ./k8s/outputs \
           --out text \
           -t spire=true \
           -t auto_apply_mesh=false \
           -e operator_manifests_yaml > ../../../${location}/withspire_noautoapply.yaml
  )
}

usage() {
  cmd_help
  exit 1
}

if [ $# -eq 0 ]; then
  cmd_build
else
  MODE="${1:-}"
  case "$MODE" in
    build|container|debug_container|debug|manifests|help)
      shift
      "cmd_$MODE" "$@"
      ;;
    *)
      usage
      ;;
  esac
fi
